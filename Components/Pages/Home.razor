@page "/"

@inject IChatService ChatService
@inject IChatClient ChatClient
@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService
<PageTitle>AI Chat</PageTitle>

@if (ChatHistory == null || !ChatHistory.Any())
{

    <div style="height: 90vh; display: flex; justify-content: center; align-items: center;">
        <RadzenCard Style="width: 100%; max-width: 600px; padding: 20px;">


            <h3 style="margin-bottom: 15px;display: flex; justify-content: center; align-items: center;">Start the conversation</h3>


            <RadzenTextArea @bind-Value="@promptText"
                            Rows="2"
                            Placeholder="Type your message..."
                            @onkeydown="HandleKeyPress"
                            Style="width: 100%; margin-bottom: 10px;" />


            <div style="display: flex; justify-content: flex-end;">
                <RadzenButton Text="Send"
                              Icon="send"
                              ButtonStyle="ButtonStyle.Primary"
                              Disabled="@isProcessing"
                              Click="@SendMessage" />
            </div>

        </RadzenCard>
    </div>
}
else
{

    <RadzenCard Style="height: 90vh; display: flex; flex-direction: column;">
        <RadzenPanel Style="flex: 1; overflow-y: auto; padding: 15px;" Collapsed="false">
            @foreach (var msg in ChatHistory)
            {
                <RadzenCard Style=@(msg.Role == ChatRole.User ? "margin-bottom: 10px; max-width: 80%; margin-left:auto; background-color:#0B6FDB;" : "margin-bottom: 10px; max-width: 80%; background-color:#EBF4FF; color:black; border:1px solid #ddd;")>
                    <ChildContent>
                        <b>@(msg.Role == ChatRole.User ? "You" : "AI")</b>
                        <div>@((MarkupString)Helper.ToHtml(msg.Text))</div>
                    </ChildContent>
                </RadzenCard>
            }

            @if (isProcessing)
            {
                <RadzenCard Style="margin-bottom: 10px; max-width: 80%; background-color:#EBF4FF; color:black; border:1px solid #ddd;">
                    <ChildContent>
                        <strong>AI</strong>
                        @if (string.IsNullOrEmpty(response))
                        {
                            <div><span class="loading-indicator">Thinking...</span></div>
                        }
                        else
                        {
                            <div>@((MarkupString)Helper.ToHtml(response))</div>
                        }
                    </ChildContent>
                </RadzenCard>
            }
        </RadzenPanel>

     
        <RadzenCard Style="border-top: 1px solid #ccc; padding: 10px; display: flex; align-items: center;">
            <RadzenTextArea @bind-Value="@promptText"
                            Rows="2" Disabled=@isProcessing
                            Placeholder="Type your message..."
                            @onkeydown="HandleKeyPress"
                            Style="flex: 1; margin-right: 10px;" />
            <RadzenButton Text="Send"
                          Icon="send"
                          ButtonStyle="ButtonStyle.Primary"
                          Disabled="@isProcessing"
                          Click="@SendMessage" />
        </RadzenCard>
    </RadzenCard>
}

@code {
    private string promptText;
    private string response = string.Empty;
    private List<ChatMessage> ChatHistory = [];

    [SupplyParameterFromQuery]
    [Parameter]
    public Guid ConversationId { get; set; }

    private List<ChatDto> Chats { get; set; } = [];
    private bool isProcessing = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        try
        {
            if (ConversationId == Guid.Empty)
                return;

            Chats = await ChatService.GetChatsAsync(ConversationId);
            ChatHistory = Helper.ConvertToChatMessages(Chats);
            await JSRuntime.InvokeVoidAsync("Prism.highlightAll");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message
            });
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("Prism.highlightAll");
        }catch(Exception ex)
        {
            
        }
    }
    private async Task SendMessage()
    {
        isProcessing = true;
        try
        {

            if (!string.IsNullOrWhiteSpace(promptText))
            {
                ChatHistory.Add(new ChatMessage(ChatRole.User, promptText));

                var option = new ChatOptions() { AllowMultipleToolCalls = true, Temperature = 0.7f, MaxOutputTokens = 8192, TopP=0.9f };

                await foreach (var update in ChatClient.GetStreamingResponseAsync(ChatHistory, option))
                {
                    response += update.Text;
                    StateHasChanged();
                }

                ChatHistory.Add(new ChatMessage(ChatRole.Assistant, response));
                //Save All Chat History
                await ChatService.SaveAllChatAsync(ChatHistory, ConversationId);
                //Scroll to bottom
                await JSRuntime.InvokeVoidAsync("scrollToBottom");
                //High Light Code Structure
                await JSRuntime.InvokeVoidAsync("Prism.highlightAll");
               
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message
            });
        }
        finally
        {
            response = string.Empty;
            promptText = string.Empty;
            isProcessing = false;
        }
        await InvokeAsync(StateHasChanged);
    }
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
}