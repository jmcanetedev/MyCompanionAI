@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject IConversationService ConversationService

<div style="display: flex; height: 100vh;">

    <!-- Sidebar -->
    <RadzenCard Style="width: 250px; display: flex; flex-direction: column; background-color: var(--rz-layout-background-color); color: white; padding: 10px;">

        <!-- New Conversation Button -->
        <RadzenButton Text="New Conversation"
                      Icon="add_circle_outline"
                      ButtonStyle="ButtonStyle.Primary"
                      Style="margin-bottom: 15px; width: 100%;"
                      Click="@NewConversation" />

        <!-- Conversation List -->
        <RadzenListBox @bind-Value="@SelectedConversation"
                       Data="@Conversations"
                       TValue="ConversationDto"
                       Style="flex: 1; background-color:  var(--rz-card-background-color) color: white;"
                       Change="@ConversationSelected">
            <Template Context="item">
                <span>@item.Title</span>
            </Template>
        </RadzenListBox>

    </RadzenCard>
</div>

@code {
    private List<ConversationDto> Conversations { get; set; } = [];

    private ConversationDto SelectedConversation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            await NewConversation();

            Conversations = await ConversationService.GetConversationsAsync();

            if (Conversations.Any())
            {
                SelectedConversation = Conversations.FirstOrDefault();
                if(SelectedConversation is not null)
                {
                    ConversationSelected(SelectedConversation);
                }
            }
        }catch(Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message
            });
        }
    }

    private async Task NewConversation()
    {
        var conversation = new ConversationDto
        {
            Id = Guid.NewGuid(),
            Title = "",
        };
        try
        {
            var success = await ConversationService.SaveConversation(conversation);
            if (success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "New conversation created successfully."
                });
                NavigationManager.NavigateTo($"/?ConversationId={conversation.Id}");
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Warning",
                    Detail = "There already an empty conversation."
                });
            }
        }
        catch(Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message
            });
        }
    }

    private void ConversationSelected(object value)
    {
        NavigationManager.NavigateTo($"/?ConversationId={((ConversationDto)value).Id}");
    }
}